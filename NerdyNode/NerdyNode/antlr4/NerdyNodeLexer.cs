//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from NerdyNodeLexer.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class NerdyNodeLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		EQ=1, SEMI=2, COL=3, DOT=4, BEGIN=5, END=6, LISTSTART=7, LISTEND=8, SETSTART=9, 
		SETEND=10, PARANSTART=11, PARANEND=12, COMMA=13, ELLIPSIS=14, LABEL=15, 
		TYPEINT=16, TYPESTRING=17, TYPEBOOL=18, INT=19, STRING=20, TRUE=21, FALSE=22, 
		TYPEGRAPH=23, TYPENODE=24, TYPEEDGE=25, TYPENODESET=26, TYPEEDGESET=27, 
		FOR=28, IN=29, IF=30, ELSE=31, RETURN=32, PLUS=33, MINUS=34, DIVIDE=35, 
		TIMES=36, MODOLUS=37, EQUALS=38, NOTEQUAL=39, LESSEQUAL=40, GRATEREQUAL=41, 
		LESSTHAN=42, GREATERTHAN=43, AND=44, OR=45, UNION=46, ADD_TO=47, RIGHTDIRECTION=48, 
		LEFTDIRECTION=49, UNDIRECTED=50, ADDUNDIRECTED=51, ADDLEFTDIRECTION=52, 
		ADDRIGHTDIRECTION=53, PRINT=54, DRAW=55, IDENTIFIER=56, WS=57, COMMENT=58, 
		BLOCKCOMMENT=59;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"EQ", "SEMI", "COL", "DOT", "BEGIN", "END", "LISTSTART", "LISTEND", "SETSTART", 
		"SETEND", "PARANSTART", "PARANEND", "COMMA", "ELLIPSIS", "LABEL", "TYPEINT", 
		"TYPESTRING", "TYPEBOOL", "INT", "STRING", "TRUE", "FALSE", "TYPEGRAPH", 
		"TYPENODE", "TYPEEDGE", "TYPENODESET", "TYPEEDGESET", "FOR", "IN", "IF", 
		"ELSE", "RETURN", "PLUS", "MINUS", "DIVIDE", "TIMES", "MODOLUS", "EQUALS", 
		"NOTEQUAL", "LESSEQUAL", "GRATEREQUAL", "LESSTHAN", "GREATERTHAN", "AND", 
		"OR", "UNION", "ADD_TO", "RIGHTDIRECTION", "LEFTDIRECTION", "UNDIRECTED", 
		"ADDUNDIRECTED", "ADDLEFTDIRECTION", "ADDRIGHTDIRECTION", "PRINT", "DRAW", 
		"IDENTIFIER", "WS", "COMMENT", "BLOCKCOMMENT"
	};


	public NerdyNodeLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public NerdyNodeLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'='", "';'", "':'", "'.'", "'begin'", "'end'", "'['", "']'", "'{'", 
		"'}'", "'('", "')'", "','", "'..'", "'|'", "'int'", "'string'", "'boolean'", 
		null, null, "'true'", "'false'", "'graph'", "'node'", "'edge'", "'nodeset'", 
		"'edgeset'", "'for'", "'in'", "'if'", "'else'", "'return'", "'+'", "'-'", 
		"'/'", "'*'", "'%'", "'=='", "'/='", "'<='", "'>='", "'<'", "'>'", "'&&'", 
		"'||'", "'union'", "'<<'", "'->'", "'<-'", "'<->'", "'<-->'", "'<--'", 
		"'-->'", "'print'", "'draw'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "EQ", "SEMI", "COL", "DOT", "BEGIN", "END", "LISTSTART", "LISTEND", 
		"SETSTART", "SETEND", "PARANSTART", "PARANEND", "COMMA", "ELLIPSIS", "LABEL", 
		"TYPEINT", "TYPESTRING", "TYPEBOOL", "INT", "STRING", "TRUE", "FALSE", 
		"TYPEGRAPH", "TYPENODE", "TYPEEDGE", "TYPENODESET", "TYPEEDGESET", "FOR", 
		"IN", "IF", "ELSE", "RETURN", "PLUS", "MINUS", "DIVIDE", "TIMES", "MODOLUS", 
		"EQUALS", "NOTEQUAL", "LESSEQUAL", "GRATEREQUAL", "LESSTHAN", "GREATERTHAN", 
		"AND", "OR", "UNION", "ADD_TO", "RIGHTDIRECTION", "LEFTDIRECTION", "UNDIRECTED", 
		"ADDUNDIRECTED", "ADDLEFTDIRECTION", "ADDRIGHTDIRECTION", "PRINT", "DRAW", 
		"IDENTIFIER", "WS", "COMMENT", "BLOCKCOMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "NerdyNodeLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static NerdyNodeLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,59,368,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
		7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
		7,56,2,57,7,57,2,58,7,58,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,
		4,1,4,1,4,1,5,1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,
		11,1,11,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,15,1,15,1,15,1,15,1,16,1,
		16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,
		18,4,18,177,8,18,11,18,12,18,178,1,19,1,19,5,19,183,8,19,10,19,12,19,186,
		9,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,
		1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,
		1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,
		1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,29,
		1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,32,1,32,
		1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,37,1,38,1,38,1,38,
		1,39,1,39,1,39,1,40,1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,1,43,1,44,
		1,44,1,44,1,45,1,45,1,45,1,45,1,45,1,45,1,46,1,46,1,46,1,47,1,47,1,47,
		1,48,1,48,1,48,1,49,1,49,1,49,1,49,1,50,1,50,1,50,1,50,1,50,1,51,1,51,
		1,51,1,51,1,52,1,52,1,52,1,52,1,53,1,53,1,53,1,53,1,53,1,53,1,54,1,54,
		1,54,1,54,1,54,1,55,1,55,5,55,332,8,55,10,55,12,55,335,9,55,1,56,4,56,
		338,8,56,11,56,12,56,339,1,56,1,56,1,57,1,57,1,57,1,57,5,57,348,8,57,10,
		57,12,57,351,9,57,1,57,1,57,1,58,1,58,1,58,1,58,5,58,359,8,58,10,58,12,
		58,362,9,58,1,58,1,58,1,58,1,58,1,58,2,184,360,0,59,1,1,3,2,5,3,7,4,9,
		5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,
		35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,
		59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,
		83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,105,
		53,107,54,109,55,111,56,113,57,115,58,117,59,1,0,5,1,0,48,57,3,0,65,90,
		95,95,97,122,4,0,48,57,65,90,95,95,97,122,3,0,9,10,12,13,32,32,1,0,10,
		10,373,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,
		1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,
		0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,
		1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,
		0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,
		1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,
		0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,
		1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,
		0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,
		1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,
		1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,1,119,
		1,0,0,0,3,121,1,0,0,0,5,123,1,0,0,0,7,125,1,0,0,0,9,127,1,0,0,0,11,133,
		1,0,0,0,13,137,1,0,0,0,15,139,1,0,0,0,17,141,1,0,0,0,19,143,1,0,0,0,21,
		145,1,0,0,0,23,147,1,0,0,0,25,149,1,0,0,0,27,151,1,0,0,0,29,154,1,0,0,
		0,31,156,1,0,0,0,33,160,1,0,0,0,35,167,1,0,0,0,37,176,1,0,0,0,39,180,1,
		0,0,0,41,189,1,0,0,0,43,194,1,0,0,0,45,200,1,0,0,0,47,206,1,0,0,0,49,211,
		1,0,0,0,51,216,1,0,0,0,53,224,1,0,0,0,55,232,1,0,0,0,57,236,1,0,0,0,59,
		239,1,0,0,0,61,242,1,0,0,0,63,247,1,0,0,0,65,254,1,0,0,0,67,256,1,0,0,
		0,69,258,1,0,0,0,71,260,1,0,0,0,73,262,1,0,0,0,75,264,1,0,0,0,77,267,1,
		0,0,0,79,270,1,0,0,0,81,273,1,0,0,0,83,276,1,0,0,0,85,278,1,0,0,0,87,280,
		1,0,0,0,89,283,1,0,0,0,91,286,1,0,0,0,93,292,1,0,0,0,95,295,1,0,0,0,97,
		298,1,0,0,0,99,301,1,0,0,0,101,305,1,0,0,0,103,310,1,0,0,0,105,314,1,0,
		0,0,107,318,1,0,0,0,109,324,1,0,0,0,111,329,1,0,0,0,113,337,1,0,0,0,115,
		343,1,0,0,0,117,354,1,0,0,0,119,120,5,61,0,0,120,2,1,0,0,0,121,122,5,59,
		0,0,122,4,1,0,0,0,123,124,5,58,0,0,124,6,1,0,0,0,125,126,5,46,0,0,126,
		8,1,0,0,0,127,128,5,98,0,0,128,129,5,101,0,0,129,130,5,103,0,0,130,131,
		5,105,0,0,131,132,5,110,0,0,132,10,1,0,0,0,133,134,5,101,0,0,134,135,5,
		110,0,0,135,136,5,100,0,0,136,12,1,0,0,0,137,138,5,91,0,0,138,14,1,0,0,
		0,139,140,5,93,0,0,140,16,1,0,0,0,141,142,5,123,0,0,142,18,1,0,0,0,143,
		144,5,125,0,0,144,20,1,0,0,0,145,146,5,40,0,0,146,22,1,0,0,0,147,148,5,
		41,0,0,148,24,1,0,0,0,149,150,5,44,0,0,150,26,1,0,0,0,151,152,5,46,0,0,
		152,153,5,46,0,0,153,28,1,0,0,0,154,155,5,124,0,0,155,30,1,0,0,0,156,157,
		5,105,0,0,157,158,5,110,0,0,158,159,5,116,0,0,159,32,1,0,0,0,160,161,5,
		115,0,0,161,162,5,116,0,0,162,163,5,114,0,0,163,164,5,105,0,0,164,165,
		5,110,0,0,165,166,5,103,0,0,166,34,1,0,0,0,167,168,5,98,0,0,168,169,5,
		111,0,0,169,170,5,111,0,0,170,171,5,108,0,0,171,172,5,101,0,0,172,173,
		5,97,0,0,173,174,5,110,0,0,174,36,1,0,0,0,175,177,7,0,0,0,176,175,1,0,
		0,0,177,178,1,0,0,0,178,176,1,0,0,0,178,179,1,0,0,0,179,38,1,0,0,0,180,
		184,5,34,0,0,181,183,9,0,0,0,182,181,1,0,0,0,183,186,1,0,0,0,184,185,1,
		0,0,0,184,182,1,0,0,0,185,187,1,0,0,0,186,184,1,0,0,0,187,188,5,34,0,0,
		188,40,1,0,0,0,189,190,5,116,0,0,190,191,5,114,0,0,191,192,5,117,0,0,192,
		193,5,101,0,0,193,42,1,0,0,0,194,195,5,102,0,0,195,196,5,97,0,0,196,197,
		5,108,0,0,197,198,5,115,0,0,198,199,5,101,0,0,199,44,1,0,0,0,200,201,5,
		103,0,0,201,202,5,114,0,0,202,203,5,97,0,0,203,204,5,112,0,0,204,205,5,
		104,0,0,205,46,1,0,0,0,206,207,5,110,0,0,207,208,5,111,0,0,208,209,5,100,
		0,0,209,210,5,101,0,0,210,48,1,0,0,0,211,212,5,101,0,0,212,213,5,100,0,
		0,213,214,5,103,0,0,214,215,5,101,0,0,215,50,1,0,0,0,216,217,5,110,0,0,
		217,218,5,111,0,0,218,219,5,100,0,0,219,220,5,101,0,0,220,221,5,115,0,
		0,221,222,5,101,0,0,222,223,5,116,0,0,223,52,1,0,0,0,224,225,5,101,0,0,
		225,226,5,100,0,0,226,227,5,103,0,0,227,228,5,101,0,0,228,229,5,115,0,
		0,229,230,5,101,0,0,230,231,5,116,0,0,231,54,1,0,0,0,232,233,5,102,0,0,
		233,234,5,111,0,0,234,235,5,114,0,0,235,56,1,0,0,0,236,237,5,105,0,0,237,
		238,5,110,0,0,238,58,1,0,0,0,239,240,5,105,0,0,240,241,5,102,0,0,241,60,
		1,0,0,0,242,243,5,101,0,0,243,244,5,108,0,0,244,245,5,115,0,0,245,246,
		5,101,0,0,246,62,1,0,0,0,247,248,5,114,0,0,248,249,5,101,0,0,249,250,5,
		116,0,0,250,251,5,117,0,0,251,252,5,114,0,0,252,253,5,110,0,0,253,64,1,
		0,0,0,254,255,5,43,0,0,255,66,1,0,0,0,256,257,5,45,0,0,257,68,1,0,0,0,
		258,259,5,47,0,0,259,70,1,0,0,0,260,261,5,42,0,0,261,72,1,0,0,0,262,263,
		5,37,0,0,263,74,1,0,0,0,264,265,5,61,0,0,265,266,5,61,0,0,266,76,1,0,0,
		0,267,268,5,47,0,0,268,269,5,61,0,0,269,78,1,0,0,0,270,271,5,60,0,0,271,
		272,5,61,0,0,272,80,1,0,0,0,273,274,5,62,0,0,274,275,5,61,0,0,275,82,1,
		0,0,0,276,277,5,60,0,0,277,84,1,0,0,0,278,279,5,62,0,0,279,86,1,0,0,0,
		280,281,5,38,0,0,281,282,5,38,0,0,282,88,1,0,0,0,283,284,5,124,0,0,284,
		285,5,124,0,0,285,90,1,0,0,0,286,287,5,117,0,0,287,288,5,110,0,0,288,289,
		5,105,0,0,289,290,5,111,0,0,290,291,5,110,0,0,291,92,1,0,0,0,292,293,5,
		60,0,0,293,294,5,60,0,0,294,94,1,0,0,0,295,296,5,45,0,0,296,297,5,62,0,
		0,297,96,1,0,0,0,298,299,5,60,0,0,299,300,5,45,0,0,300,98,1,0,0,0,301,
		302,5,60,0,0,302,303,5,45,0,0,303,304,5,62,0,0,304,100,1,0,0,0,305,306,
		5,60,0,0,306,307,5,45,0,0,307,308,5,45,0,0,308,309,5,62,0,0,309,102,1,
		0,0,0,310,311,5,60,0,0,311,312,5,45,0,0,312,313,5,45,0,0,313,104,1,0,0,
		0,314,315,5,45,0,0,315,316,5,45,0,0,316,317,5,62,0,0,317,106,1,0,0,0,318,
		319,5,112,0,0,319,320,5,114,0,0,320,321,5,105,0,0,321,322,5,110,0,0,322,
		323,5,116,0,0,323,108,1,0,0,0,324,325,5,100,0,0,325,326,5,114,0,0,326,
		327,5,97,0,0,327,328,5,119,0,0,328,110,1,0,0,0,329,333,7,1,0,0,330,332,
		7,2,0,0,331,330,1,0,0,0,332,335,1,0,0,0,333,331,1,0,0,0,333,334,1,0,0,
		0,334,112,1,0,0,0,335,333,1,0,0,0,336,338,7,3,0,0,337,336,1,0,0,0,338,
		339,1,0,0,0,339,337,1,0,0,0,339,340,1,0,0,0,340,341,1,0,0,0,341,342,6,
		56,0,0,342,114,1,0,0,0,343,344,5,47,0,0,344,345,5,47,0,0,345,349,1,0,0,
		0,346,348,8,4,0,0,347,346,1,0,0,0,348,351,1,0,0,0,349,347,1,0,0,0,349,
		350,1,0,0,0,350,352,1,0,0,0,351,349,1,0,0,0,352,353,6,57,0,0,353,116,1,
		0,0,0,354,355,5,47,0,0,355,356,5,42,0,0,356,360,1,0,0,0,357,359,9,0,0,
		0,358,357,1,0,0,0,359,362,1,0,0,0,360,361,1,0,0,0,360,358,1,0,0,0,361,
		363,1,0,0,0,362,360,1,0,0,0,363,364,5,42,0,0,364,365,5,47,0,0,365,366,
		1,0,0,0,366,367,6,58,0,0,367,118,1,0,0,0,7,0,178,184,333,339,349,360,1,
		6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
