//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/jonasstjerne/Documents/Privat/Repos/NerdyNode/NerdyNode/NerdyNode/grammar/NerdyNodeLexer.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class NerdyNodeLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		EQ=1, SEMI=2, COL=3, BEGIN=4, END=5, LISTSTART=6, LISTEND=7, SETSTART=8, 
		SETEND=9, PARANSTART=10, PARANEND=11, COMMA=12, ELLIPSIS=13, LABEL=14, 
		TYPEINT=15, INT=16, TYPESTRING=17, STRING=18, TYPEBOOL=19, TRUE=20, FALSE=21, 
		TYPEGRAPH=22, TYPENODE=23, TYPEEDGE=24, FOR=25, FOREACH=26, IF=27, PLUS=28, 
		MINUS=29, DIVIDE=30, TIMES=31, MODOLUS=32, EQUALS=33, NOTEQUAL=34, LESSEQUAL=35, 
		GRATEREQUAL=36, LESSTHAN=37, GREATERTHAN=38, AND=39, OR=40, NOT=41, IN=42, 
		UNION=43, INTERSECTION=44, COMPLIMENT=45, CARTESIANPRODUCT=46, SUPSET=47, 
		SUPERSET=48, NOTIN=49, ADDTOGRAPH=50, IDENTIFIER=51, WS=52;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"EQ", "SEMI", "COL", "BEGIN", "END", "LISTSTART", "LISTEND", "SETSTART", 
		"SETEND", "PARANSTART", "PARANEND", "COMMA", "ELLIPSIS", "LABEL", "TYPEINT", 
		"INT", "TYPESTRING", "STRING", "TYPEBOOL", "TRUE", "FALSE", "TYPEGRAPH", 
		"TYPENODE", "TYPEEDGE", "FOR", "FOREACH", "IF", "PLUS", "MINUS", "DIVIDE", 
		"TIMES", "MODOLUS", "EQUALS", "NOTEQUAL", "LESSEQUAL", "GRATEREQUAL", 
		"LESSTHAN", "GREATERTHAN", "AND", "OR", "NOT", "IN", "UNION", "INTERSECTION", 
		"COMPLIMENT", "CARTESIANPRODUCT", "SUPSET", "SUPERSET", "NOTIN", "ADDTOGRAPH", 
		"IDENTIFIER", "WS"
	};


	public NerdyNodeLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public NerdyNodeLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'='", "';'", "':'", "'begin'", "'end'", "'['", "']'", "'{'", "'}'", 
		"'('", "')'", "','", "'..'", "'\"'", "'int'", null, "'string'", null, 
		"'boolean'", "'true'", "'false'", "'graph'", "'node'", "'edge'", "'for'", 
		"'foreach'", "'if'", "'+'", "'-'", "'/'", "'*'", "'%'", "'=='", "'/='", 
		"'<='", "'>='", "'<'", "'>'", "'&&'", "'||'", "'not'", "'in'", "'union'", 
		"'inter'", "'\\'", "'product'", "'subset'", "'superset'", null, "'<<'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "EQ", "SEMI", "COL", "BEGIN", "END", "LISTSTART", "LISTEND", "SETSTART", 
		"SETEND", "PARANSTART", "PARANEND", "COMMA", "ELLIPSIS", "LABEL", "TYPEINT", 
		"INT", "TYPESTRING", "STRING", "TYPEBOOL", "TRUE", "FALSE", "TYPEGRAPH", 
		"TYPENODE", "TYPEEDGE", "FOR", "FOREACH", "IF", "PLUS", "MINUS", "DIVIDE", 
		"TIMES", "MODOLUS", "EQUALS", "NOTEQUAL", "LESSEQUAL", "GRATEREQUAL", 
		"LESSTHAN", "GREATERTHAN", "AND", "OR", "NOT", "IN", "UNION", "INTERSECTION", 
		"COMPLIMENT", "CARTESIANPRODUCT", "SUPSET", "SUPERSET", "NOTIN", "ADDTOGRAPH", 
		"IDENTIFIER", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "NerdyNodeLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static NerdyNodeLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,52,316,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
		7,49,2,50,7,50,2,51,7,51,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,
		3,1,4,1,4,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,
		11,1,11,1,12,1,12,1,12,1,13,1,13,1,14,1,14,1,14,1,14,1,15,4,15,146,8,15,
		11,15,12,15,147,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,5,17,159,
		8,17,10,17,12,17,162,9,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,
		1,18,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,
		1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,
		1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,
		1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,32,
		1,33,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,37,1,37,1,38,
		1,38,1,38,1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,42,1,42,
		1,42,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,43,1,44,1,44,1,45,1,45,
		1,45,1,45,1,45,1,45,1,45,1,45,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,47,
		1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,48,1,48,1,48,1,48,1,48,1,48,
		1,48,1,49,1,49,1,49,1,50,1,50,5,50,305,8,50,10,50,12,50,308,9,50,1,51,
		4,51,311,8,51,11,51,12,51,312,1,51,1,51,1,160,0,52,1,1,3,2,5,3,7,4,9,5,
		11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,
		18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,
		30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,
		42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,1,0,4,
		1,0,48,57,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,3,0,9,10,
		12,13,32,32,319,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,
		0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,
		0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,
		1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,
		0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,
		1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,
		0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,
		1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,
		0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,
		1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,1,105,1,0,0,0,3,107,1,
		0,0,0,5,109,1,0,0,0,7,111,1,0,0,0,9,117,1,0,0,0,11,121,1,0,0,0,13,123,
		1,0,0,0,15,125,1,0,0,0,17,127,1,0,0,0,19,129,1,0,0,0,21,131,1,0,0,0,23,
		133,1,0,0,0,25,135,1,0,0,0,27,138,1,0,0,0,29,140,1,0,0,0,31,145,1,0,0,
		0,33,149,1,0,0,0,35,156,1,0,0,0,37,165,1,0,0,0,39,173,1,0,0,0,41,178,1,
		0,0,0,43,184,1,0,0,0,45,190,1,0,0,0,47,195,1,0,0,0,49,200,1,0,0,0,51,204,
		1,0,0,0,53,212,1,0,0,0,55,215,1,0,0,0,57,217,1,0,0,0,59,219,1,0,0,0,61,
		221,1,0,0,0,63,223,1,0,0,0,65,225,1,0,0,0,67,228,1,0,0,0,69,231,1,0,0,
		0,71,234,1,0,0,0,73,237,1,0,0,0,75,239,1,0,0,0,77,241,1,0,0,0,79,244,1,
		0,0,0,81,247,1,0,0,0,83,251,1,0,0,0,85,254,1,0,0,0,87,260,1,0,0,0,89,266,
		1,0,0,0,91,268,1,0,0,0,93,276,1,0,0,0,95,283,1,0,0,0,97,292,1,0,0,0,99,
		299,1,0,0,0,101,302,1,0,0,0,103,310,1,0,0,0,105,106,5,61,0,0,106,2,1,0,
		0,0,107,108,5,59,0,0,108,4,1,0,0,0,109,110,5,58,0,0,110,6,1,0,0,0,111,
		112,5,98,0,0,112,113,5,101,0,0,113,114,5,103,0,0,114,115,5,105,0,0,115,
		116,5,110,0,0,116,8,1,0,0,0,117,118,5,101,0,0,118,119,5,110,0,0,119,120,
		5,100,0,0,120,10,1,0,0,0,121,122,5,91,0,0,122,12,1,0,0,0,123,124,5,93,
		0,0,124,14,1,0,0,0,125,126,5,123,0,0,126,16,1,0,0,0,127,128,5,125,0,0,
		128,18,1,0,0,0,129,130,5,40,0,0,130,20,1,0,0,0,131,132,5,41,0,0,132,22,
		1,0,0,0,133,134,5,44,0,0,134,24,1,0,0,0,135,136,5,46,0,0,136,137,5,46,
		0,0,137,26,1,0,0,0,138,139,5,34,0,0,139,28,1,0,0,0,140,141,5,105,0,0,141,
		142,5,110,0,0,142,143,5,116,0,0,143,30,1,0,0,0,144,146,7,0,0,0,145,144,
		1,0,0,0,146,147,1,0,0,0,147,145,1,0,0,0,147,148,1,0,0,0,148,32,1,0,0,0,
		149,150,5,115,0,0,150,151,5,116,0,0,151,152,5,114,0,0,152,153,5,105,0,
		0,153,154,5,110,0,0,154,155,5,103,0,0,155,34,1,0,0,0,156,160,5,34,0,0,
		157,159,9,0,0,0,158,157,1,0,0,0,159,162,1,0,0,0,160,161,1,0,0,0,160,158,
		1,0,0,0,161,163,1,0,0,0,162,160,1,0,0,0,163,164,5,34,0,0,164,36,1,0,0,
		0,165,166,5,98,0,0,166,167,5,111,0,0,167,168,5,111,0,0,168,169,5,108,0,
		0,169,170,5,101,0,0,170,171,5,97,0,0,171,172,5,110,0,0,172,38,1,0,0,0,
		173,174,5,116,0,0,174,175,5,114,0,0,175,176,5,117,0,0,176,177,5,101,0,
		0,177,40,1,0,0,0,178,179,5,102,0,0,179,180,5,97,0,0,180,181,5,108,0,0,
		181,182,5,115,0,0,182,183,5,101,0,0,183,42,1,0,0,0,184,185,5,103,0,0,185,
		186,5,114,0,0,186,187,5,97,0,0,187,188,5,112,0,0,188,189,5,104,0,0,189,
		44,1,0,0,0,190,191,5,110,0,0,191,192,5,111,0,0,192,193,5,100,0,0,193,194,
		5,101,0,0,194,46,1,0,0,0,195,196,5,101,0,0,196,197,5,100,0,0,197,198,5,
		103,0,0,198,199,5,101,0,0,199,48,1,0,0,0,200,201,5,102,0,0,201,202,5,111,
		0,0,202,203,5,114,0,0,203,50,1,0,0,0,204,205,5,102,0,0,205,206,5,111,0,
		0,206,207,5,114,0,0,207,208,5,101,0,0,208,209,5,97,0,0,209,210,5,99,0,
		0,210,211,5,104,0,0,211,52,1,0,0,0,212,213,5,105,0,0,213,214,5,102,0,0,
		214,54,1,0,0,0,215,216,5,43,0,0,216,56,1,0,0,0,217,218,5,45,0,0,218,58,
		1,0,0,0,219,220,5,47,0,0,220,60,1,0,0,0,221,222,5,42,0,0,222,62,1,0,0,
		0,223,224,5,37,0,0,224,64,1,0,0,0,225,226,5,61,0,0,226,227,5,61,0,0,227,
		66,1,0,0,0,228,229,5,47,0,0,229,230,5,61,0,0,230,68,1,0,0,0,231,232,5,
		60,0,0,232,233,5,61,0,0,233,70,1,0,0,0,234,235,5,62,0,0,235,236,5,61,0,
		0,236,72,1,0,0,0,237,238,5,60,0,0,238,74,1,0,0,0,239,240,5,62,0,0,240,
		76,1,0,0,0,241,242,5,38,0,0,242,243,5,38,0,0,243,78,1,0,0,0,244,245,5,
		124,0,0,245,246,5,124,0,0,246,80,1,0,0,0,247,248,5,110,0,0,248,249,5,111,
		0,0,249,250,5,116,0,0,250,82,1,0,0,0,251,252,5,105,0,0,252,253,5,110,0,
		0,253,84,1,0,0,0,254,255,5,117,0,0,255,256,5,110,0,0,256,257,5,105,0,0,
		257,258,5,111,0,0,258,259,5,110,0,0,259,86,1,0,0,0,260,261,5,105,0,0,261,
		262,5,110,0,0,262,263,5,116,0,0,263,264,5,101,0,0,264,265,5,114,0,0,265,
		88,1,0,0,0,266,267,5,92,0,0,267,90,1,0,0,0,268,269,5,112,0,0,269,270,5,
		114,0,0,270,271,5,111,0,0,271,272,5,100,0,0,272,273,5,117,0,0,273,274,
		5,99,0,0,274,275,5,116,0,0,275,92,1,0,0,0,276,277,5,115,0,0,277,278,5,
		117,0,0,278,279,5,98,0,0,279,280,5,115,0,0,280,281,5,101,0,0,281,282,5,
		116,0,0,282,94,1,0,0,0,283,284,5,115,0,0,284,285,5,117,0,0,285,286,5,112,
		0,0,286,287,5,101,0,0,287,288,5,114,0,0,288,289,5,115,0,0,289,290,5,101,
		0,0,290,291,5,116,0,0,291,96,1,0,0,0,292,293,5,110,0,0,293,294,5,111,0,
		0,294,295,5,116,0,0,295,296,1,0,0,0,296,297,5,105,0,0,297,298,5,110,0,
		0,298,98,1,0,0,0,299,300,5,60,0,0,300,301,5,60,0,0,301,100,1,0,0,0,302,
		306,7,1,0,0,303,305,7,2,0,0,304,303,1,0,0,0,305,308,1,0,0,0,306,304,1,
		0,0,0,306,307,1,0,0,0,307,102,1,0,0,0,308,306,1,0,0,0,309,311,7,3,0,0,
		310,309,1,0,0,0,311,312,1,0,0,0,312,310,1,0,0,0,312,313,1,0,0,0,313,314,
		1,0,0,0,314,315,6,51,0,0,315,104,1,0,0,0,5,0,147,160,306,312,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
