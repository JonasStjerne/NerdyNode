//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/jonasstjerne/Documents/Privat/Repos/NerdyNode/NerdyNode/NerdyNode/grammar/NerdyNodeParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class NerdyNodeParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		EQ=1, SEMI=2, COL=3, DOT=4, BEGIN=5, END=6, LISTSTART=7, LISTEND=8, SETSTART=9, 
		SETEND=10, PARANSTART=11, PARANEND=12, COMMA=13, ELLIPSIS=14, LABEL=15, 
		TYPEINT=16, TYPESTRING=17, TYPEBOOL=18, INT=19, STRING=20, TRUE=21, FALSE=22, 
		TYPEGRAPH=23, TYPENODE=24, TYPEEDGE=25, TYPENODESET=26, TYPEEDGESET=27, 
		FOR=28, IN=29, IF=30, ELSE=31, PLUS=32, MINUS=33, DIVIDE=34, TIMES=35, 
		MODOLUS=36, EQUALS=37, NOTEQUAL=38, LESSEQUAL=39, GRATEREQUAL=40, LESSTHAN=41, 
		GREATERTHAN=42, AND=43, OR=44, UNION=45, RIGHTDIRECTION=46, LEFTDIRECTION=47, 
		UNDIRECTED=48, ADDUNDIRECTED=49, ADDLEFTDIRECTION=50, ADDRIGHTDIRECTION=51, 
		PRINT=52, IDENTIFIER=53, WS=54, COMMENT=55, BLOCKCOMMENT=56;
	public const int
		RULE_program = 0, RULE_block = 1, RULE_statement = 2, RULE_forstmt = 3, 
		RULE_ifstmt = 4, RULE_declaration = 5, RULE_assignment = 6, RULE_type = 7, 
		RULE_expr = 8, RULE_value = 9, RULE_bool = 10, RULE_arrow = 11, RULE_list = 12, 
		RULE_numop = 13, RULE_boolop = 14, RULE_graphop = 15, RULE_graph = 16, 
		RULE_nodeset = 17, RULE_edgeset = 18, RULE_identlist = 19, RULE_funccall = 20, 
		RULE_paramlist = 21, RULE_graphfunc = 22, RULE_addtograph = 23, RULE_print = 24;
	public static readonly string[] ruleNames = {
		"program", "block", "statement", "forstmt", "ifstmt", "declaration", "assignment", 
		"type", "expr", "value", "bool", "arrow", "list", "numop", "boolop", "graphop", 
		"graph", "nodeset", "edgeset", "identlist", "funccall", "paramlist", "graphfunc", 
		"addtograph", "print"
	};

	private static readonly string[] _LiteralNames = {
		null, "'='", "';'", "':'", "'.'", "'begin'", "'end'", "'['", "']'", "'{'", 
		"'}'", "'('", "')'", "','", "'..'", "'|'", "'int'", "'string'", "'boolean'", 
		null, null, "'true'", "'false'", "'graph'", "'node'", "'edge'", "'nodeset'", 
		"'edgeset'", "'for'", "'in'", "'if'", "'else'", "'+'", "'-'", "'/'", "'*'", 
		"'%'", "'=='", "'/='", "'<='", "'>='", "'<'", "'>'", "'&&'", "'||'", "'union'", 
		"'->'", "'<-'", "'<->'", "'<-->'", "'<--'", "'-->'", "'print'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "EQ", "SEMI", "COL", "DOT", "BEGIN", "END", "LISTSTART", "LISTEND", 
		"SETSTART", "SETEND", "PARANSTART", "PARANEND", "COMMA", "ELLIPSIS", "LABEL", 
		"TYPEINT", "TYPESTRING", "TYPEBOOL", "INT", "STRING", "TRUE", "FALSE", 
		"TYPEGRAPH", "TYPENODE", "TYPEEDGE", "TYPENODESET", "TYPEEDGESET", "FOR", 
		"IN", "IF", "ELSE", "PLUS", "MINUS", "DIVIDE", "TIMES", "MODOLUS", "EQUALS", 
		"NOTEQUAL", "LESSEQUAL", "GRATEREQUAL", "LESSTHAN", "GREATERTHAN", "AND", 
		"OR", "UNION", "RIGHTDIRECTION", "LEFTDIRECTION", "UNDIRECTED", "ADDUNDIRECTED", 
		"ADDLEFTDIRECTION", "ADDRIGHTDIRECTION", "PRINT", "IDENTIFIER", "WS", 
		"COMMENT", "BLOCKCOMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "NerdyNodeParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static NerdyNodeParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public NerdyNodeParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public NerdyNodeParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(NerdyNodeParser.Eof, 0); }
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INerdyNodeParserVisitor<TResult> typedVisitor = visitor as INerdyNodeParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 50;
			block();
			State = 51;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN() { return GetToken(NerdyNodeParser.BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(NerdyNodeParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(NerdyNodeParser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(NerdyNodeParser.SEMI, i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INerdyNodeParserVisitor<TResult> typedVisitor = visitor as INerdyNodeParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 2, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 53;
			Match(BEGIN);
			State = 59;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 13510800484794368L) != 0)) {
				{
				{
				State = 54;
				statement();
				State = 55;
				Match(SEMI);
				}
				}
				State = 61;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 62;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ForstmtContext forstmt() {
			return GetRuleContext<ForstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfstmtContext ifstmt() {
			return GetRuleContext<IfstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunccallContext funccall() {
			return GetRuleContext<FunccallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GraphfuncContext graphfunc() {
			return GetRuleContext<GraphfuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintContext print() {
			return GetRuleContext<PrintContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INerdyNodeParserVisitor<TResult> typedVisitor = visitor as INerdyNodeParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 71;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 64;
				forstmt();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 65;
				ifstmt();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 66;
				declaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 67;
				assignment();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 68;
				funccall();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 69;
				graphfunc();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 70;
				print();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(NerdyNodeParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(NerdyNodeParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(NerdyNodeParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ListContext list() {
			return GetRuleContext<ListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ForstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INerdyNodeParserVisitor<TResult> typedVisitor = visitor as INerdyNodeParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForstmtContext forstmt() {
		ForstmtContext _localctx = new ForstmtContext(Context, State);
		EnterRule(_localctx, 6, RULE_forstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 73;
			Match(FOR);
			State = 74;
			Match(IDENTIFIER);
			State = 75;
			Match(IN);
			State = 76;
			list();
			State = 77;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(NerdyNodeParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(NerdyNodeParser.ELSE, 0); }
		public IfstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INerdyNodeParserVisitor<TResult> typedVisitor = visitor as INerdyNodeParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfstmtContext ifstmt() {
		IfstmtContext _localctx = new IfstmtContext(Context, State);
		EnterRule(_localctx, 8, RULE_ifstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79;
			Match(IF);
			State = 80;
			expr(0);
			State = 81;
			block();
			State = 84;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 82;
				Match(ELSE);
				State = 83;
				block();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INerdyNodeParserVisitor<TResult> typedVisitor = visitor as INerdyNodeParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 10, RULE_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 86;
			type();
			State = 87;
			assignment();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(NerdyNodeParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(NerdyNodeParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INerdyNodeParserVisitor<TResult> typedVisitor = visitor as INerdyNodeParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 12, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89;
			Match(IDENTIFIER);
			State = 90;
			Match(EQ);
			State = 91;
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPEINT() { return GetToken(NerdyNodeParser.TYPEINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPESTRING() { return GetToken(NerdyNodeParser.TYPESTRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPEBOOL() { return GetToken(NerdyNodeParser.TYPEBOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPENODE() { return GetToken(NerdyNodeParser.TYPENODE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPEEDGE() { return GetToken(NerdyNodeParser.TYPEEDGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPEGRAPH() { return GetToken(NerdyNodeParser.TYPEGRAPH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPENODESET() { return GetToken(NerdyNodeParser.TYPENODESET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPEEDGESET() { return GetToken(NerdyNodeParser.TYPEEDGESET, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INerdyNodeParserVisitor<TResult> typedVisitor = visitor as INerdyNodeParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 14, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 260505600L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(NerdyNodeParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(NerdyNodeParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunccallContext funccall() {
			return GetRuleContext<FunccallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARANSTART() { return GetToken(NerdyNodeParser.PARANSTART, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARANEND() { return GetToken(NerdyNodeParser.PARANEND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LABEL() { return GetTokens(NerdyNodeParser.LABEL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LABEL(int i) {
			return GetToken(NerdyNodeParser.LABEL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SETSTART() { return GetToken(NerdyNodeParser.SETSTART, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrowContext arrow() {
			return GetRuleContext<ArrowContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SETEND() { return GetToken(NerdyNodeParser.SETEND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumopContext numop() {
			return GetRuleContext<NumopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolopContext boolop() {
			return GetRuleContext<BoolopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GraphopContext graphop() {
			return GetRuleContext<GraphopContext>(0);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INerdyNodeParserVisitor<TResult> typedVisitor = visitor as INerdyNodeParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 16;
		EnterRecursionRule(_localctx, 16, RULE_expr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 113;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				{
				State = 96;
				value();
				}
				break;
			case 2:
				{
				State = 97;
				Match(IDENTIFIER);
				}
				break;
			case 3:
				{
				State = 98;
				funccall();
				}
				break;
			case 4:
				{
				State = 99;
				Match(PARANSTART);
				State = 100;
				expr(0);
				State = 101;
				Match(PARANEND);
				}
				break;
			case 5:
				{
				State = 103;
				Match(LABEL);
				State = 104;
				expr(0);
				State = 105;
				Match(LABEL);
				}
				break;
			case 6:
				{
				State = 107;
				Match(SETSTART);
				State = 108;
				Match(IDENTIFIER);
				State = 109;
				arrow();
				State = 110;
				Match(IDENTIFIER);
				State = 111;
				Match(SETEND);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 129;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 127;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
					case 1:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 115;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 116;
						numop();
						State = 117;
						expr(7);
						}
						break;
					case 2:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 119;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 120;
						boolop();
						State = 121;
						expr(6);
						}
						break;
					case 3:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 123;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 124;
						graphop();
						State = 125;
						expr(5);
						}
						break;
					}
					} 
				}
				State = 131;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(NerdyNodeParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(NerdyNodeParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BoolContext @bool() {
			return GetRuleContext<BoolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GraphContext graph() {
			return GetRuleContext<GraphContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NodesetContext nodeset() {
			return GetRuleContext<NodesetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EdgesetContext edgeset() {
			return GetRuleContext<EdgesetContext>(0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INerdyNodeParserVisitor<TResult> typedVisitor = visitor as INerdyNodeParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 18, RULE_value);
		try {
			State = 138;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 132;
				Match(INT);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 133;
				Match(STRING);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 134;
				@bool();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 135;
				graph();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 136;
				nodeset();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 137;
				edgeset();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(NerdyNodeParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(NerdyNodeParser.FALSE, 0); }
		public BoolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bool; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INerdyNodeParserVisitor<TResult> typedVisitor = visitor as INerdyNodeParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBool(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolContext @bool() {
		BoolContext _localctx = new BoolContext(Context, State);
		EnterRule(_localctx, 20, RULE_bool);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140;
			_la = TokenStream.LA(1);
			if ( !(_la==TRUE || _la==FALSE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrowContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTDIRECTION() { return GetToken(NerdyNodeParser.RIGHTDIRECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTDIRECTION() { return GetToken(NerdyNodeParser.LEFTDIRECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDIRECTED() { return GetToken(NerdyNodeParser.UNDIRECTED, 0); }
		public ArrowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrow; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INerdyNodeParserVisitor<TResult> typedVisitor = visitor as INerdyNodeParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrow(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrowContext arrow() {
		ArrowContext _localctx = new ArrowContext(Context, State);
		EnterRule(_localctx, 22, RULE_arrow);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 142;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 492581209243648L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LISTSTART() { return GetToken(NerdyNodeParser.LISTSTART, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELLIPSIS() { return GetToken(NerdyNodeParser.ELLIPSIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LISTEND() { return GetToken(NerdyNodeParser.LISTEND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(NerdyNodeParser.IDENTIFIER, 0); }
		public ListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INerdyNodeParserVisitor<TResult> typedVisitor = visitor as INerdyNodeParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListContext list() {
		ListContext _localctx = new ListContext(Context, State);
		EnterRule(_localctx, 24, RULE_list);
		try {
			State = 151;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LISTSTART:
				EnterOuterAlt(_localctx, 1);
				{
				State = 144;
				Match(LISTSTART);
				State = 145;
				expr(0);
				State = 146;
				Match(ELLIPSIS);
				State = 147;
				expr(0);
				State = 148;
				Match(LISTEND);
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 150;
				Match(IDENTIFIER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(NerdyNodeParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(NerdyNodeParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVIDE() { return GetToken(NerdyNodeParser.DIVIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMES() { return GetToken(NerdyNodeParser.TIMES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODOLUS() { return GetToken(NerdyNodeParser.MODOLUS, 0); }
		public NumopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INerdyNodeParserVisitor<TResult> typedVisitor = visitor as INerdyNodeParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumopContext numop() {
		NumopContext _localctx = new NumopContext(Context, State);
		EnterRule(_localctx, 26, RULE_numop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 153;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 133143986176L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(NerdyNodeParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTEQUAL() { return GetToken(NerdyNodeParser.NOTEQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESSEQUAL() { return GetToken(NerdyNodeParser.LESSEQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRATEREQUAL() { return GetToken(NerdyNodeParser.GRATEREQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESSTHAN() { return GetToken(NerdyNodeParser.LESSTHAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATERTHAN() { return GetToken(NerdyNodeParser.GREATERTHAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(NerdyNodeParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(NerdyNodeParser.OR, 0); }
		public BoolopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INerdyNodeParserVisitor<TResult> typedVisitor = visitor as INerdyNodeParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolopContext boolop() {
		BoolopContext _localctx = new BoolopContext(Context, State);
		EnterRule(_localctx, 28, RULE_boolop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 155;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 35046933135360L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GraphopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNION() { return GetToken(NerdyNodeParser.UNION, 0); }
		public GraphopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_graphop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INerdyNodeParserVisitor<TResult> typedVisitor = visitor as INerdyNodeParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGraphop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GraphopContext graphop() {
		GraphopContext _localctx = new GraphopContext(Context, State);
		EnterRule(_localctx, 30, RULE_graphop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 157;
			Match(UNION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GraphContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARANSTART() { return GetToken(NerdyNodeParser.PARANSTART, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NodesetContext nodeset() {
			return GetRuleContext<NodesetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(NerdyNodeParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EdgesetContext edgeset() {
			return GetRuleContext<EdgesetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARANEND() { return GetToken(NerdyNodeParser.PARANEND, 0); }
		public GraphContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_graph; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INerdyNodeParserVisitor<TResult> typedVisitor = visitor as INerdyNodeParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGraph(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GraphContext graph() {
		GraphContext _localctx = new GraphContext(Context, State);
		EnterRule(_localctx, 32, RULE_graph);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 159;
			Match(PARANSTART);
			State = 160;
			nodeset();
			State = 161;
			Match(COMMA);
			State = 162;
			edgeset();
			State = 163;
			Match(PARANEND);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NodesetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SETSTART() { return GetToken(NerdyNodeParser.SETSTART, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentlistContext identlist() {
			return GetRuleContext<IdentlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SETEND() { return GetToken(NerdyNodeParser.SETEND, 0); }
		public NodesetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nodeset; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INerdyNodeParserVisitor<TResult> typedVisitor = visitor as INerdyNodeParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNodeset(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NodesetContext nodeset() {
		NodesetContext _localctx = new NodesetContext(Context, State);
		EnterRule(_localctx, 34, RULE_nodeset);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 165;
			Match(SETSTART);
			State = 166;
			identlist();
			State = 167;
			Match(SETEND);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EdgesetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SETSTART() { return GetToken(NerdyNodeParser.SETSTART, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentlistContext identlist() {
			return GetRuleContext<IdentlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SETEND() { return GetToken(NerdyNodeParser.SETEND, 0); }
		public EdgesetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_edgeset; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INerdyNodeParserVisitor<TResult> typedVisitor = visitor as INerdyNodeParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEdgeset(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EdgesetContext edgeset() {
		EdgesetContext _localctx = new EdgesetContext(Context, State);
		EnterRule(_localctx, 36, RULE_edgeset);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 169;
			Match(SETSTART);
			State = 170;
			identlist();
			State = 171;
			Match(SETEND);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(NerdyNodeParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(NerdyNodeParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(NerdyNodeParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(NerdyNodeParser.COMMA, i);
		}
		public IdentlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INerdyNodeParserVisitor<TResult> typedVisitor = visitor as INerdyNodeParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentlistContext identlist() {
		IdentlistContext _localctx = new IdentlistContext(Context, State);
		EnterRule(_localctx, 38, RULE_identlist);
		int _la;
		try {
			int _alt;
			State = 183;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 174;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IDENTIFIER) {
					{
					State = 173;
					Match(IDENTIFIER);
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 178;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 176;
						Match(IDENTIFIER);
						State = 177;
						Match(COMMA);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 180;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 182;
				Match(IDENTIFIER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunccallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(NerdyNodeParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(NerdyNodeParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(NerdyNodeParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARANSTART() { return GetToken(NerdyNodeParser.PARANSTART, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParamlistContext paramlist() {
			return GetRuleContext<ParamlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARANEND() { return GetToken(NerdyNodeParser.PARANEND, 0); }
		public FunccallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funccall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INerdyNodeParserVisitor<TResult> typedVisitor = visitor as INerdyNodeParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunccall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunccallContext funccall() {
		FunccallContext _localctx = new FunccallContext(Context, State);
		EnterRule(_localctx, 40, RULE_funccall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 185;
			Match(IDENTIFIER);
			State = 186;
			Match(DOT);
			State = 187;
			Match(IDENTIFIER);
			State = 188;
			Match(PARANSTART);
			State = 189;
			paramlist();
			State = 190;
			Match(PARANEND);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(NerdyNodeParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(NerdyNodeParser.COMMA, i);
		}
		public ParamlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paramlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INerdyNodeParserVisitor<TResult> typedVisitor = visitor as INerdyNodeParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParamlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamlistContext paramlist() {
		ParamlistContext _localctx = new ParamlistContext(Context, State);
		EnterRule(_localctx, 42, RULE_paramlist);
		int _la;
		try {
			int _alt;
			State = 204;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 193;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007199262640640L) != 0)) {
					{
					State = 192;
					expr(0);
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 198;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 195;
						expr(0);
						State = 196;
						Match(COMMA);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 200;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 202;
				expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GraphfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AddtographContext addtograph() {
			return GetRuleContext<AddtographContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(NerdyNodeParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(NerdyNodeParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunccallContext[] funccall() {
			return GetRuleContexts<FunccallContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunccallContext funccall(int i) {
			return GetRuleContext<FunccallContext>(i);
		}
		public GraphfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_graphfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INerdyNodeParserVisitor<TResult> typedVisitor = visitor as INerdyNodeParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGraphfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GraphfuncContext graphfunc() {
		GraphfuncContext _localctx = new GraphfuncContext(Context, State);
		EnterRule(_localctx, 44, RULE_graphfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 208;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				{
				State = 206;
				Match(IDENTIFIER);
				}
				break;
			case 2:
				{
				State = 207;
				funccall();
				}
				break;
			}
			State = 210;
			addtograph();
			State = 213;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				{
				State = 211;
				Match(IDENTIFIER);
				}
				break;
			case 2:
				{
				State = 212;
				funccall();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddtographContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADDUNDIRECTED() { return GetToken(NerdyNodeParser.ADDUNDIRECTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADDLEFTDIRECTION() { return GetToken(NerdyNodeParser.ADDLEFTDIRECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADDRIGHTDIRECTION() { return GetToken(NerdyNodeParser.ADDRIGHTDIRECTION, 0); }
		public AddtographContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addtograph; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INerdyNodeParserVisitor<TResult> typedVisitor = visitor as INerdyNodeParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddtograph(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddtographContext addtograph() {
		AddtographContext _localctx = new AddtographContext(Context, State);
		EnterRule(_localctx, 46, RULE_addtograph);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 215;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 3940649673949184L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINT() { return GetToken(NerdyNodeParser.PRINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public PrintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_print; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INerdyNodeParserVisitor<TResult> typedVisitor = visitor as INerdyNodeParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintContext print() {
		PrintContext _localctx = new PrintContext(Context, State);
		EnterRule(_localctx, 48, RULE_print);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 217;
			Match(PRINT);
			State = 218;
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 8: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 6);
		case 1: return Precpred(Context, 5);
		case 2: return Precpred(Context, 4);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,56,221,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,1,0,1,0,1,0,1,1,1,1,1,1,1,1,5,1,58,8,1,10,
		1,12,1,61,9,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,72,8,2,1,3,1,3,1,
		3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,3,4,85,8,4,1,5,1,5,1,5,1,6,1,6,1,6,1,
		6,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
		1,8,1,8,1,8,3,8,114,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,
		8,5,8,128,8,8,10,8,12,8,131,9,8,1,9,1,9,1,9,1,9,1,9,1,9,3,9,139,8,9,1,
		10,1,10,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,152,8,12,1,13,
		1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,
		1,17,1,18,1,18,1,18,1,18,1,19,3,19,175,8,19,1,19,1,19,4,19,179,8,19,11,
		19,12,19,180,1,19,3,19,184,8,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,21,
		3,21,194,8,21,1,21,1,21,1,21,4,21,199,8,21,11,21,12,21,200,1,21,1,21,3,
		21,205,8,21,1,22,1,22,3,22,209,8,22,1,22,1,22,1,22,3,22,214,8,22,1,23,
		1,23,1,24,1,24,1,24,1,24,0,1,16,25,0,2,4,6,8,10,12,14,16,18,20,22,24,26,
		28,30,32,34,36,38,40,42,44,46,48,0,6,2,0,16,18,23,27,1,0,21,22,1,0,46,
		48,1,0,32,36,1,0,37,44,1,0,49,51,225,0,50,1,0,0,0,2,53,1,0,0,0,4,71,1,
		0,0,0,6,73,1,0,0,0,8,79,1,0,0,0,10,86,1,0,0,0,12,89,1,0,0,0,14,93,1,0,
		0,0,16,113,1,0,0,0,18,138,1,0,0,0,20,140,1,0,0,0,22,142,1,0,0,0,24,151,
		1,0,0,0,26,153,1,0,0,0,28,155,1,0,0,0,30,157,1,0,0,0,32,159,1,0,0,0,34,
		165,1,0,0,0,36,169,1,0,0,0,38,183,1,0,0,0,40,185,1,0,0,0,42,204,1,0,0,
		0,44,208,1,0,0,0,46,215,1,0,0,0,48,217,1,0,0,0,50,51,3,2,1,0,51,52,5,0,
		0,1,52,1,1,0,0,0,53,59,5,5,0,0,54,55,3,4,2,0,55,56,5,2,0,0,56,58,1,0,0,
		0,57,54,1,0,0,0,58,61,1,0,0,0,59,57,1,0,0,0,59,60,1,0,0,0,60,62,1,0,0,
		0,61,59,1,0,0,0,62,63,5,6,0,0,63,3,1,0,0,0,64,72,3,6,3,0,65,72,3,8,4,0,
		66,72,3,10,5,0,67,72,3,12,6,0,68,72,3,40,20,0,69,72,3,44,22,0,70,72,3,
		48,24,0,71,64,1,0,0,0,71,65,1,0,0,0,71,66,1,0,0,0,71,67,1,0,0,0,71,68,
		1,0,0,0,71,69,1,0,0,0,71,70,1,0,0,0,72,5,1,0,0,0,73,74,5,28,0,0,74,75,
		5,53,0,0,75,76,5,29,0,0,76,77,3,24,12,0,77,78,3,2,1,0,78,7,1,0,0,0,79,
		80,5,30,0,0,80,81,3,16,8,0,81,84,3,2,1,0,82,83,5,31,0,0,83,85,3,2,1,0,
		84,82,1,0,0,0,84,85,1,0,0,0,85,9,1,0,0,0,86,87,3,14,7,0,87,88,3,12,6,0,
		88,11,1,0,0,0,89,90,5,53,0,0,90,91,5,1,0,0,91,92,3,16,8,0,92,13,1,0,0,
		0,93,94,7,0,0,0,94,15,1,0,0,0,95,96,6,8,-1,0,96,114,3,18,9,0,97,114,5,
		53,0,0,98,114,3,40,20,0,99,100,5,11,0,0,100,101,3,16,8,0,101,102,5,12,
		0,0,102,114,1,0,0,0,103,104,5,15,0,0,104,105,3,16,8,0,105,106,5,15,0,0,
		106,114,1,0,0,0,107,108,5,9,0,0,108,109,5,53,0,0,109,110,3,22,11,0,110,
		111,5,53,0,0,111,112,5,10,0,0,112,114,1,0,0,0,113,95,1,0,0,0,113,97,1,
		0,0,0,113,98,1,0,0,0,113,99,1,0,0,0,113,103,1,0,0,0,113,107,1,0,0,0,114,
		129,1,0,0,0,115,116,10,6,0,0,116,117,3,26,13,0,117,118,3,16,8,7,118,128,
		1,0,0,0,119,120,10,5,0,0,120,121,3,28,14,0,121,122,3,16,8,6,122,128,1,
		0,0,0,123,124,10,4,0,0,124,125,3,30,15,0,125,126,3,16,8,5,126,128,1,0,
		0,0,127,115,1,0,0,0,127,119,1,0,0,0,127,123,1,0,0,0,128,131,1,0,0,0,129,
		127,1,0,0,0,129,130,1,0,0,0,130,17,1,0,0,0,131,129,1,0,0,0,132,139,5,19,
		0,0,133,139,5,20,0,0,134,139,3,20,10,0,135,139,3,32,16,0,136,139,3,34,
		17,0,137,139,3,36,18,0,138,132,1,0,0,0,138,133,1,0,0,0,138,134,1,0,0,0,
		138,135,1,0,0,0,138,136,1,0,0,0,138,137,1,0,0,0,139,19,1,0,0,0,140,141,
		7,1,0,0,141,21,1,0,0,0,142,143,7,2,0,0,143,23,1,0,0,0,144,145,5,7,0,0,
		145,146,3,16,8,0,146,147,5,14,0,0,147,148,3,16,8,0,148,149,5,8,0,0,149,
		152,1,0,0,0,150,152,5,53,0,0,151,144,1,0,0,0,151,150,1,0,0,0,152,25,1,
		0,0,0,153,154,7,3,0,0,154,27,1,0,0,0,155,156,7,4,0,0,156,29,1,0,0,0,157,
		158,5,45,0,0,158,31,1,0,0,0,159,160,5,11,0,0,160,161,3,34,17,0,161,162,
		5,13,0,0,162,163,3,36,18,0,163,164,5,12,0,0,164,33,1,0,0,0,165,166,5,9,
		0,0,166,167,3,38,19,0,167,168,5,10,0,0,168,35,1,0,0,0,169,170,5,9,0,0,
		170,171,3,38,19,0,171,172,5,10,0,0,172,37,1,0,0,0,173,175,5,53,0,0,174,
		173,1,0,0,0,174,175,1,0,0,0,175,184,1,0,0,0,176,177,5,53,0,0,177,179,5,
		13,0,0,178,176,1,0,0,0,179,180,1,0,0,0,180,178,1,0,0,0,180,181,1,0,0,0,
		181,182,1,0,0,0,182,184,5,53,0,0,183,174,1,0,0,0,183,178,1,0,0,0,184,39,
		1,0,0,0,185,186,5,53,0,0,186,187,5,4,0,0,187,188,5,53,0,0,188,189,5,11,
		0,0,189,190,3,42,21,0,190,191,5,12,0,0,191,41,1,0,0,0,192,194,3,16,8,0,
		193,192,1,0,0,0,193,194,1,0,0,0,194,205,1,0,0,0,195,196,3,16,8,0,196,197,
		5,13,0,0,197,199,1,0,0,0,198,195,1,0,0,0,199,200,1,0,0,0,200,198,1,0,0,
		0,200,201,1,0,0,0,201,202,1,0,0,0,202,203,3,16,8,0,203,205,1,0,0,0,204,
		193,1,0,0,0,204,198,1,0,0,0,205,43,1,0,0,0,206,209,5,53,0,0,207,209,3,
		40,20,0,208,206,1,0,0,0,208,207,1,0,0,0,209,210,1,0,0,0,210,213,3,46,23,
		0,211,214,5,53,0,0,212,214,3,40,20,0,213,211,1,0,0,0,213,212,1,0,0,0,214,
		45,1,0,0,0,215,216,7,5,0,0,216,47,1,0,0,0,217,218,5,52,0,0,218,219,3,16,
		8,0,219,49,1,0,0,0,16,59,71,84,113,127,129,138,151,174,180,183,193,200,
		204,208,213
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
